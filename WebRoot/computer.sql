/*
SQLyog Ultimate v11.24 (32 bit)
MySQL - 5.6.23 : Database - computer
*********************************************************************
*/

/*!40101 SET NAMES utf8 */;

/*!40101 SET SQL_MODE=''*/;

/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;
CREATE DATABASE /*!32312 IF NOT EXISTS*/`computer` /*!40100 DEFAULT CHARACTER SET utf8 */;

USE `computer`;

/*Table structure for table `article` */

DROP TABLE IF EXISTS `article`;

CREATE TABLE `article` (
  `article_id` int(255) NOT NULL AUTO_INCREMENT COMMENT '主键/自动递增',
  `title` varchar(200) NOT NULL COMMENT '文章标题',
  `author_id` int(255) NOT NULL COMMENT '文章作者的id',
  `acontent` varchar(20000) NOT NULL COMMENT '文章内容',
  `uptime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '文章上传前最后一次操作时间',
  `state` int(2) NOT NULL COMMENT '文章状态/0草稿1已发布',
  `credit` int(50) NOT NULL DEFAULT '0' COMMENT '文章点赞数',
  PRIMARY KEY (`article_id`),
  KEY `author_id` (`author_id`),
  CONSTRAINT `article_ibfk_1` FOREIGN KEY (`author_id`) REFERENCES `user` (`id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=33 DEFAULT CHARSET=utf8;

/*Data for the table `article` */

insert  into `article`(`article_id`,`title`,`author_id`,`acontent`,`uptime`,`state`,`credit`) values (19,'三九四的慢腾腾宫',32,'今天的任务\r\n1、icon\r\n<link rel=\"shortcut icon\" href=\"<%=bathPath%>images/logo.png\">\r\n2、跳转\r\n<meta http-equiv=\"Refresh\" content=\"0;url=food/food_showFood\">\r\n这也是个办法，但我用了框架实现首页内容的实现\r\n<iframe id=\"mainframe\" src=\"Article_browseValidArticles\" name=\"mainframe\"></iframe>  \r\n3、改拦截器\r\n我之前没有对页面实施拦截，所以我这里也不需要改拦截。但建议是把某些方法加上拦截器，比如：\r\n发表文章前\r\n4、显示图片\r\n数据库里添加varchar字段，存储图片地址。\r\n\r\n8、加管理员那一项','2016-06-03 15:44:20',1,0),(20,'Retina （一种新型高分辨率的显示技术）',32,'所谓“Retina”是一种显示技术，可以将把更多的像素点压缩至一块屏幕里，从而达到更高的分辨率并提高屏幕显示的细腻程度。由摩托罗拉公司研发。最初该技术是用于Moto Aura上。这种分辨率在正常观看距离下足以使人肉眼无法分辨其中的单独像素。也被称为视网膜显示屏。\r\n外文名 Retina 性    质 显示技术 系    统 iOS 应    用 苹果系列手机\r\n目录\r\n','2016-06-03 15:44:20',1,0),(22,'string （C++,java等编程语言中的字符串） 编',32,'C++ 中的 string 类\r\n相信使用过MFC编程的朋友对CString这个类的印象应该非常深刻吧？的确，MFC中的CString类使用起来真的非常的方便好用。但是如果离开了MFC框架，还有没有这样使用起来非常方便的类呢？答案是肯定的。也许有人会说，即使不用MFC框架，也可以想办法使用MFC中的API，具体的操作方法在本文最后给出操作方法。其实，可能很多人很可能会忽略掉标准C++中string类的使用。标准C++中提供的string类得功能也是非常强大的，一般都能满足我们开发项目时使用。现将具体用法的一部分罗列如下，只起一个抛砖引玉的作用吧，好了，废话少说，直接进入正题吧！\r\n包含\r\n要想使用标准C++中string类，必须要包含\r\n#include <string>// 注意是<string>，不是<string.h>，带.h的是C语言中的头文件\r\nusing std::string;using std::wstring;\r\n或\r\nusing namespace std;\r\n下面你就可以使用string/wstring了，它们两分别对应着char和wchar_t。\r\n用法','2016-06-03 15:44:20',1,0),(24,'request.getParameter(“参数名”) 中文乱码解决方法',32,'在Java 开发中，如果框架搭建的不完善或者初学者在学习过程中，出现中文乱码是经常的事儿（哈。谁让发明java语言的不是中国人呢）\r\n\r\n今天跟大家分享几个解决java Web开发中，request.getParameter()获取URL中文参数乱码的解决办法\r\n\r\n解决问题，先要研究问题，URL传中文参数为什么会出现乱码？\r\n\r\n原因：Http请求传输时将url以ISO-8859-1编码，服务器收到字节流后默认会以ISO-8859-1编码来解码成字符流（造成中文乱码）\r\n\r\n解决办法：我们需要把request.getParameter(“参数名”)获取到的字符串先用ISO-8859-1编码成字节流，然后再将其用utf-8解码成字符流\r\n\r\n代码：\r\n[java] 预览复制\r\n\r\n    String str = new String(request.getParameter(\"参数名\").getBytes(\"iso-8859-1\"), \"utf-8\");  \r\n\r\n这是通过转码的方式处理乱码问题，我们也可以通过Tomcat配置文件，设置URL编码集（URIEncoding）设置编码，这种方法也是一劳永逸的，\r\n\r\n修改Tomcat/conf 目录下 server.xml\r\n[xml] 预览复制\r\n\r\n    <Connector port=\"8080\" protocol=\"HTTP/1.1\"   \r\n        connectionTimeout=\"20000\"   \r\n        redirectPort=\"8444\"   \r\n        useBodyEncodingForURI=\"true\" URIEncoding=\"UTF-8\"/>  \r\n\r\n重点在 userBodyEncodingForURI 和 URIEncoding 这两个属性\r\n\r\n下面来解释一下这两个属性的意义\r\n\r\n    useBodyEncodingForURI参数表示是否用request.setCharacterEncoding参数对URL提交的数据和表单中GET方式提交的数据进行重新编码，在默认情况下，该参数为false。\r\n\r\n    URIEncoding参数指定对所有GET方式请求进行统一的重新编码（解码）的编码。\r\n\r\nURIEncoding和useBodyEncodingForURI区别是，\r\n\r\n    URIEncoding是对所有GET方式的请求的数据进行统一的重新编码，\r\n\r\n    而useBodyEncodingForURI则是根据响应该请求的页面的request.setCharacterEncoding参数对数据进行的重新编码，不同的页面可以有不同的重新编码的编码\r\n\r\n \r\n\r\n还有一种方法，通过重写getParameter方法，设置解码/方式来解决乱码问题，请参照：Java防止xss攻击 修改。','2016-06-03 15:44:20',1,0),(25,'Git教程',32,'史上最浅显易懂的Git教程！\r\n\r\n为什么要编写这个教程？因为我在学习Git的过程中，买过书，也在网上Google了一堆Git相关的文章和教程，但令人失望的是，这些教程不是难得令人发指，就是简单得一笔带过，或者，只支离破碎地介绍Git的某几个命令，还有直接从Git手册粘贴帮助文档的，总之，初学者很难找到一个由浅入深，学完后能立刻上手的Git教程。\r\n\r\n既然号称史上最浅显易懂的Git教程，那这个教程有什么让你怦然心动的特点呢？\r\n\r\n首先，本教程绝对面向初学者，没有接触过版本控制概念的读者也可以轻松入门，不必担心起步难度；\r\n\r\n其次，本教程实用性超强，边学边练，一点也不觉得枯燥。而且，你所学的Git命令是“充分且必要”的，掌握了这些东西，你就可以通过Git轻松地完成你的工作。\r\n文字+图片还看不明白？有视频！！！\r\n\r\n本教程只会让你成为Git用户，不会让你成为Git专家。很多Git命令只有那些专家才明白（事实上我也不明白，因为我不是Git专家），但我保证这些命令可能你一辈子都不会用到。既然Git是一个工具，就没必要把时间浪费在那些“高级”但几乎永远不会用到的命令上。一旦你真的非用不可了，到时候再自行Google或者请教专家也未迟。\r\n\r\n如果你是一个开发人员，想用上这个世界上目前最先进的分布式版本控制系统，那么，赶快开始学习吧！\r\n关于作者\r\n\r\n廖雪峰，十年软件开发经验，业余产品经理，精通Java/Python/Ruby/Visual Basic/Objective C等，对开源框架有深入研究，著有《Spring 2.0核心技术与最佳实践》一书，多个业余开源项目托管在GitHub，欢迎微博交流：','2016-06-03 15:44:20',1,0),(26,'java.net.ConnectExce',33,'java.net.ConnectException: Connection refused: connect\r\n at java.net.PlainSocketImpl.socketConnect(Native Method)\r\n at java.net.PlainSocketImpl.doConnect(Unknown Source)\r\n at java.net.PlainSocketImpl.connectToAddress(Unknown Source)\r\n at java.net.PlainSocketImpl.connect(Unknown Source)\r\n at java.net.SocksSocketImpl.connect(Unknown Source)\r\n at java.net.Socket.connect(Unknown Source)\r\n at java.net.Socket.connect(Unknown Source)\r\n at java.net.Socket.<init>(Unknown Source)\r\n at java.net.Socket.<init>(Unknown Source)\r\n at org.apache.catalina.startup.Catalina.stopServer(Catalina.java:395)\r\n at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)\r\n at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\r\n at java.lang.reflect.Method.invoke(Unknown Source)\r\n at org.apache.catalina.startup.Bootstrap.stopServer(Bootstrap.java:337)\r\n at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:415)\r\n\r\n请问这是什么原因导致这个错误那？？急啊！！\r\n原因：\r\n\r\nserverSocket没有创建起来，所以你的cilentSocket去连接的时候就会这样报错。\r\n你运行 cmd-netstat -nao 看下你serverSocket所监听的端口有没有存在。\r\n不明白的地方Q（448667）','2016-06-04 15:57:22',1,0),(27,'JDBC',33,'有了JDBC，向各种关系数据发送SQL语句就是一件很容易的事。换言之，有了JDBC API，就不必为访问Sybase数据库专门写一个程序，为访问Oracle数据库又专门写一个程序，或为访问Informix数据库又编写另一个程序等等，程序员只需用JDBC API写一个程序就够了，它可向相应数据库发送SQL调用。同时，将Java语言和JDBC结合起来使程序员不必为不同的平台编写不同的应用程序，只须写一遍程序就可以让它在任何平台上运行，这也是Java语言“编写一次，处处运行”的优势。\r\nJava数据库连接体系结构是用于Java应用程序连接数据库的标准方法。JDBC对Java程序员而言是API，对实现与数据库连接的服务提供商而言是接口模型。作为API，JDBC为程序开发提供标准的接口，并为数据库厂商及第三方中间件厂商实现与数据库的连接提供了标准方法。JDBC使用已有的SQL标准并支持与其它数据库连接标准，如ODBC之间的桥接。JDBC实现了所有这些面向标准的目标并且具有简单、严格类型定义且高性能实现的接口。\r\nJava 具有坚固、安全、易于使用、易于理解和可从网络上自动下载等特性，是编写数据库应用程序的杰出语言。所需要的只是 Java应用程序与各种不同数据库之间进行对话的方法。而 JDBC 正是作为此种用途的机制。\r\nJDBC 扩展了 Java 的功能。例如，用 Java 和 JDBC API 可以发布含有 applet 的网页，而该 applet 使用的信息可能来自远程数据库。企业也可以用 JDBC 通过 Intranet 将所有职员连到一个或多个内部数据库中（即使这些职员所用的计算机有 Windows、 Macintosh 和UNIX 等各种不同的操作系统）。随着越来越多的程序员开始使用Java 编程语言，对从 Java 中便捷地访问数据库的要求也在日益增加。\r\nMIS管理员们都喜欢 Java 和 JDBC 的结合，因为它使信息传播变得容易和经济。企业可继续使用它们安装好的数据库，并能便捷地存取信息，即使这些信息是储存在不同数据库管理系统上。新程序的开发期很短。安装和版本控制将大为简化。程序员可只编写一遍应用程序或只更新一次，然后将它放到服务器上，随后任何人就都可得到最新版本的应用程序。对于商务上的销售信息服务， Java 和JDBC 可为外部客户提供获取信息更新的更好方法。\r\n用途\r\n编辑\r\n简单地说，JDBC 可做三件事：与数据库建立连接、发送 操作数据库的语句并处理结果。下列代码段给出了以上三步的基本示例：\r\nConnection con = DriverManager.getConnection(\"jdbc:odbc:wombat\",\"login\",\r\n\"password\");\r\nStatement stmt = con.createStatement();\r\nResultSet rs = stmt.executeQuery(\"SELECT a, b, c FROM Table1\");\r\nwhile (rs.next()) {\r\nint x = rs.getInt(\"a\");\r\nString s = rs.getString(\"b\");\r\nfloat f = rs.getFloat(\"c\");\r\n}\r\n上述代码对基于JDBC的数据库访问做了经典的总结，当然，在本小节的后续部分会对它做详尽的分析讲解。\r\nAPI\r\n编辑\r\nJDBC 是个\"低级\"接口，也就是说，它用于直接调用 SQL 命令。在这方面它的功能极佳，并比其它的数据库连接 API 易于使用，但它同时也被设计为一种基础接口，在它之上可以建立高级接口和工具。高级接口是\"对用户友好的\"接口，它使用的是一种更易理解和更为方便的 API，这种API在幕后被转换为诸如 JDBC 这样的低级接口。\r\n在关系数据库的\"对象/关系\"映射中，表中的每行对应于类的一个实例，而每列的值对应于该实例的一个属性。于是，程序员可直接对 Java 对象进行操作；存取数据所需的 SQL 调用将在\"掩盖下\"自动生成。此外还可提供更复杂的映射，例如将多个表中的行结合进一个 Java 类中。\r\n随着人们对 JDBC 的兴趣日益增涨，越来越多的开发人员一直在使用基于 JDBC 的工具，以使程序的编写更加容易。程序员也一直在编写力图使最终用户对数据库的访问变得更为简单的应用程序。例如应用程序可提供一个选择数据库任务的菜单。任务被选定后，应用程序将给出提示及空白供填写执行选定任务所需的信息。所需信息输入应用程序将自动调用所需的 SQL 命令。在这样一种程序的协助下，即使用户根本不懂 SQL 的语法，也可以执行数据库任务。\r\n比较\r\n编辑\r\n目前，Microsoft 的 ODBC API 可能是使用最广的、用于访问关系数据库的编程接口。它能在几乎所有平台上连接几乎所有的数据库。为什么 Java 不使用 ODBC？对这个问题的回答是：Java 可以使用 ODBC，但最好是在 JDBC 的帮助下以JDBC-ODBC桥的形式使用，这一点我们稍后再说。现在的问题已变成：\"为什么需要 JDBC\"？答案是显然的：ODBC 不适合直接在 Java 中使用，因为它使用 C 语言接口。从Java 调用本地 C代码在安全性、实现、坚固性和程序的自动移植性方面都有许多缺点。从 ODBC C API 到 Java API 的字面翻译是不可取的。例如，Java 没有指针，而 ODBC 却对指针用得很广泛（包括很容易出错的指针\"void *\"）。您可以将 JDBC 想象成被转换为面向对象接口的 ODBC，而面向对象的接口对 Java程序员来说较易于接受。\r\nODBC 很难学。它把简单和高级功能混在一起，而且即使对于简单的查询，其选项也极为复杂。相反，JDBC 尽量保证简单功能的简便性，而同时在必要时允许使用高级功能。启用\"纯 Java \"机制需要象 JDBC 这样的 Java API。如果使用ODBC，就必须手动地将 ODBC 驱动程序管理器和驱动程序安装在每台客户机上。如果完全用 Java 编写 JDBC 驱动程序则 JDBC代码在所有 Java 平台上（从网络计算机到大型机）都可以自 动安装、移植并保证安全性。\r\n总之，JDBC API 对于基本的 SQL 抽象和概念是一种自然的 Java 接口。它建立在 ODBC 上而不是从零开始。因此，熟悉 ODBC 的程序员将发现 JDBC 很容易使用。JDBC 保留了 ODBC 的基本设计特征；事实上，两种接口都基于 X/Open SQL CLI（调用级接口）。它们之间最大的区别在于：JDBC 以 Java 风格与优点为基础并进行优化，因此更加易于使用。\r\n目前，Microsoft 又引进了 ODBC 之外的新 API： RDO、 ADO 和OLE DB。这些设计在许多方面与 JDBC 是相同的，即它们都是面向对象的数据库接口且基于可在 ODBC 上实现的类。但在这些接口中，我们未看见有特别的功能使我们要转而选择它们来替代 ODBC，尤其是在 ODBC 驱动程序已建立起较为完善的市场的情况下。它们最多也就是在 ODBC 上加了一种装饰而已。\r\n支持\r\n编辑\r\nJDBC API 既支持数据库访问的两层模型（C/S），同时也支持三层模型（B/S）。在两层模型中，Java applet或应用程序将直接与数据库进行对话。这将需要一个JDBC驱动程序来与所访问的特定数据库管理系统进行 通讯。用户的SQL语句被送往数据库中，而其结果将被送回给用户。数据库可以位于另一台计算机上，用户通过网络连接到上面。这就叫做客户机/服务器配置，其中用户的计算机为客户机，提供数据库的计算机为服务器。网络可以是 Intranet（它可将公司职员连接起来），也可以是 Internet。\r\n在三层模型中，命令先是被发送到服务的\"中间层\"，然后由它将SQL 语句发送给数据库。数据库对 SQL 语句进行处理并将结果送回到中间层，中间层再将结果送回给用户。MIS 主管们都发现三层模型很吸引人，因为可用中间层来控制对公司数据的访问和可作的的更新的种类。中间层的另一个好处是，用户可以利用易于使用的高级API，而中间层将把它转换为相应的低级调用。最后，许多情况下三层结构可提供一些性能上的好处。\r\n到目前为止，中间层通常都用 C 或 C++ 这类语言来编写，这些语言执行速度较快。然而，随着最优化编译器（它把 Java字节代码转换为高效的特定于机器的代码）的引入，用 Java 来实现中间层将变得越来越实际。这将是一个很大的进步，它使人们可以充分利用 Java 的诸多优点（如坚固、多线程和安全等特征）。JDBC 对于从Java的中间层来访问数据库非常重要。','2016-06-04 15:59:39',1,0),(28,'(转)一个from表单实现提交多个action',33,'方法一：\r\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">\r\n<html>\r\n<head>\r\n<title></title>\r\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=gb2312\">\r\n</head>\r\n\r\n<body>\r\n\r\n<form action=\"\" name=\"form1\">\r\n    <input type=\"button\" value=\"查询1\" type=\"submit\" onclick=\"form1.action=\'action_1\';form1.submit();\"/>\r\n    <input type=\"button\" value=\"查询2\" type=\"submit\" onclick=\"form1.action=\'action_2\';form1.submit();\" />\r\n</form>\r\n\r\n或：\r\n<Script Language=\"JavaScript\">\r\n    function modify()\r\n    {\r\n    document.form1.action=\"modify.jsp\";\r\n    document.form1.submit();\r\n    } \r\n\r\n    function delete()\r\n    {\r\n    document.form1.action=\"delete.jsp\";\r\n    document.form1.submit();\r\n    }\r\n</Script>\r\n\r\n<form name=\"form1\" action=\"\">\r\n    <INPUT Type=\"Button\" Name=\"Modify\" Value=\"修改\" onClick=\"modify()\">\r\n    <INPUT Type=\"Button\" Name=\"Delete\" Value=\"删除\" onClick=\"delete()\">\r\n</form>\r\n这样可以实现将多个按钮发送到不同的网页中。\r\n</body>\r\n</html>\r\n\r\n方法二：\r\n提交form的时候，里面的action不能带参数，例：\r\n<form action=\"test.do?args=888\"> \r\n   <input type=\"button\" value=\"submit\">\r\n</form>\r\n\r\n通过这个方法，test.do无法读取args，必须换成以下写法\r\n<form action=\"test.do\"> \r\n   <input type=\"hidden\" name=\"args\" value=\"888\">\r\n   <input type=\"button\" value=\"submit\">\r\n</form>','2016-06-04 16:14:39',1,0),(29,'JSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。',33,'JSON[1]  结构有两种结构[2] \r\njson简单说就是javascript中的对象和数组，所以这两种结构就是对象和数组两种结构，通过这两种结构可以表示各种复杂的结构。\r\n1、对象：对象在js中表示为“{}”括起来的内容，数据结构为 {key：value,key：value,...}的键值对的结构，在面向对象的语言中，key为对象的属性，value为对应的属性值，所以很容易理解，取值方法为 对象.key 获取属性值，这个属性值的类型可以是 数字、字符串、数组、对象几种。\r\n2、数组：数组在js中是中括号“[]”括起来的内容，数据结构为 [\"java\",\"javascript\",\"vb\",...]，取值方式和所有语言中一样，使用索引获取，字段值的类型可以是 数字、字符串、数组、对象几种。\r\n经过对象、数组2种结构就可以组合成复杂的数据结构了。\r\n基础示例\r\n编辑\r\n简单地说[2]  ，JSON 可以将 JavaScript 对象中表示的一组数据转换为字符串，然后就可以在函数之间轻松地传递这个字符串，或者在异步应用程序中将字符串从 Web 客户机传递给服务器端程序。这个字符串看起来有点儿古怪，但是JavaScript很容易解释它，而且 JSON 可以表示比\"名称 / 值对\"更复杂的结构。例如，可以表示数组和复杂的对象，而不仅仅是键和值的简单列表。\r\n名称 / 值对\r\n按照最简单的形式，可以用下面这样的 JSON 表示\"名称 / 值对\"：\r\n1\r\n	\r\n{\"firstName\":\"Brett\"}\r\n这个示例非常基本，而且实际上比等效的纯文本\"名称 / 值对\"占用更多的空间：\r\n1\r\n	\r\nfirstName=Brett\r\n但是，当将多个\"名称 / 值对\"串在一起时，JSON 就会体现出它的价值了。首先，可以创建包含多个\"名称 / 值对\"的 记录，比如：\r\n1\r\n	\r\n{\"firstName\":\"Brett\",\"lastName\":\"McLaughlin\",\"email\":\"aaaa\"}\r\n从语法方面来看，这与\"名称 / 值对\"相比并没有很大的优势，但是在这种情况下 JSON 更容易使用，而且可读性更好。例如，它明确地表示以上三个值都是同一记录的一部分；花括号使这些值有了某种联系。\r\n表示数组\r\n当需要表示一组值时，JSON 不但能够提高可读性，而且可以减少复杂性。例如，假设您希望表示一个人名列表。在XML中，需要许多开始标记和结束标记；如果使用典型的名称 / 值对（就像在本系列前面文章中看到的那种名称 / 值对），那么必须建立一种专有的数据格式，或者将键名称修改为 person1-firstName这样的形式。\r\n如果使用 JSON，就只需将多个带花括号的记录分组在一起：\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n	\r\n{\r\n    \"people\":[\r\n        {\"firstName\":\"Brett\",\"lastName\":\"McLaughlin\",\"email\":\"aaaa\"},\r\n        {\"firstName\":\"Jason\",\"lastName\":\"Hunter\",\"email\":\"bbbb\"},\r\n        {\"firstName\":\"Elliotte\",\"lastName\":\"Harold\",\"email\":\"cccc\"}\r\n    ]\r\n}\r\n这不难理解。在这个示例中，只有一个名为 people的变量，值是包含三个条目的数组，每个条目是一个人的记录，其中包含名、姓和电子邮件地址。上面的示例演示如何用括号将记录组合成一个值。当然，可以使用相同的语法表示多个值（每个值包含多个记录）：\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\n23\r\n24\r\n25\r\n26\r\n27\r\n28\r\n29\r\n30\r\n31\r\n32\r\n33\r\n34\r\n35\r\n36\r\n37\r\n	\r\n{\r\n    \"programmers\": [{\r\n        \"firstName\": \"Brett\",\r\n        \"lastName\": \"McLaughlin\",\r\n        \"email\": \"aaaa\"\r\n    }, {\r\n        \"firstName\": \"Jason\",\r\n        \"lastName\": \"Hunter\",\r\n        \"email\": \"bbbb\"\r\n    }, {\r\n        \"firstName\": \"Elliotte\",\r\n        \"lastName\": \"Harold\",\r\n        \"email\": \"cccc\"\r\n    }],\r\n    \"authors\": [{\r\n        \"firstName\": \"Isaac\",\r\n        \"lastName\": \"Asimov\",\r\n        \"genre\": \"sciencefiction\"\r\n    }, {\r\n        \"firstName\": \"Tad\",\r\n        \"lastName\": \"Williams\",\r\n        \"genre\": \"fantasy\"\r\n    }, {\r\n        \"firstName\": \"Frank\",\r\n        \"lastName\": \"Peretti\",\r\n        \"genre\": \"christianfiction\"\r\n    }],\r\n    \"musicians\": [{\r\n        \"firstName\": \"Eric\",\r\n        \"lastName\": \"Clapton\",\r\n        \"instrument\": \"guitar\"\r\n    }, {\r\n        \"firstName\": \"Sergei\",\r\n        \"lastName\": \"Rachmaninoff\",\r\n        \"instrument\": \"piano\"\r\n    }]\r\n}\r\n这里最值得注意的是，能够表示多个值，每个值进而包含多个值。但是还应该注意，在不同的主条目（programmers、authors 和 musicians）之间，记录中实际的名称 / 值对可以不一样。JSON 是完全动态的，允许在 JSON 结构的中间改变表示数据的方式。\r\n在处理 JSON 格式的数据时，没有需要遵守的预定义的约束。所以，在同样的数据结构中，可以改变表示数据的方式，甚至可以以不同方式表示同一事物。\r\n格式应用\r\n编辑\r\n掌握了 JSON 格式之后，在 JavaScript 中使用它就很简单了。JSON 是 JavaScript 原生格式，这意味着在 JavaScript 中处理 JSON 数据不需要任何特殊的 API 或工具包。\r\n赋值给变量\r\n例如，可以创建一个新的 JavaScript 变量，然后将 JSON 格式的数据字符串直接赋值给它：\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\n23\r\n24\r\n25\r\n26\r\n27\r\n28\r\n29\r\n30\r\n31\r\n32\r\n33\r\n34\r\n35\r\n36\r\n37\r\n	\r\nvar people = {\r\n    \"programmers\": [{\r\n        \"firstName\": \"Brett\",\r\n        \"lastName\": \"McLaughlin\",\r\n        \"email\": \"aaaa\"\r\n    }, {\r\n        \"firstName\": \"Jason\",\r\n        \"lastName\": \"Hunter\",\r\n        \"email\": \"bbbb\"\r\n    }, {\r\n        \"firstName\": \"Elliotte\",\r\n        \"lastName\": \"Harold\",\r\n        \"email\": \"cccc\"\r\n    }],\r\n    \"authors\": [{\r\n        \"firstName\": \"Isaac\",\r\n        \"lastName\": \"Asimov\",\r\n        \"genre\": \"sciencefiction\"\r\n    }, {\r\n        \"firstName\": \"Tad\",\r\n        \"lastName\": \"Williams\",\r\n        \"genre\": \"fantasy\"\r\n    }, {\r\n        \"firstName\": \"Frank\",\r\n        \"lastName\": \"Peretti\",\r\n        \"genre\": \"christianfiction\"\r\n    }],\r\n    \"musicians\": [{\r\n        \"firstName\": \"Eric\",\r\n        \"lastName\": \"Clapton\",\r\n        \"instrument\": \"guitar\"\r\n    }, {\r\n        \"firstName\": \"Sergei\",\r\n        \"lastName\": \"Rachmaninoff\",\r\n        \"instrument\": \"piano\"\r\n    }]\r\n};\r\n这非常简单；people包含前面看到的 JSON 格式的数据。但是，这还不够，因为访问数据的方式似乎还不明显。\r\n访问数据\r\n尽管看起来不明显，但是上面的长字符串实际上只是一个数组；将这个数组放进 JavaScript变量之后，就可以很轻松地访问它。实际上，只需用点号表示法来表示数组元素。所以，要想访问 programmers 列表的第一个条目的姓氏，只需在 JavaScript 中使用下面这样的代码：\r\n1\r\n	\r\npeople.programmers[0].lastName;\r\n注意，数组索引是从零开始的。所以，这行代码首先访问 people变量中的数据；然后移动到称为 programmers的条目，再移动到第一个记录（[0]）；最后，访问 lastName键的值。结果是字符串值 “McLaughlin”。\r\n下面是使用同一变量的几个示例。\r\n1\r\n2\r\n3\r\n	\r\npeople.authors[1].genre  // Value is \"fantasy\"\r\npeople.musicians[3].lastName // Undefined. This refers to the fourth entry, and there isn\'t one\r\npeople.programmers[2].firstName // Value is \"Elliotte\"\r\n利用这样的语法，可以处理任何 JSON 格式的数据，而不需要使用任何额外','2016-06-04 16:16:16',1,0),(30,'JAVA中反射机制',33,'在我的上篇文章模拟JDK动态代理实现中涉及到了反射机制，学无止境，在此系统的学习一下Java中的反射机制。首先给出Java反射机制的定义：\r\n\r\n    JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性；这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制。\r\n\r\n从以上的描述中可以看出Java中的动态特性，那么Java属于动态语言吗？一般而言说到动态语言，大致认同的一个定义是：“程序运行时，允许改变程序结构或变量类型，这种语言称为动态语言”。从这个观点看，Perl，Python，Ruby是动态语言，C++，Java，C#不是动态语言。\r\n\r\n尽管在这样的定义与分类下Java不是动态语言，但是它却有着一个非常突出的动态相关机制，即反射机制。通过Java反射机制可以在运行时才加载class，得到这个类的类类型的相关信息，生成实体对象、或对其成员变量设值、唤起方法。\r\n\r\n总上，Java反射机制主要提供了以下功能： 在运行时判断任意一个对象所属的类；在运行时构造任意一个类的对象；在运行时判断任意一个类所具有的成员变量和方法；在运行时调用任意一个对象的方法；生成动态代理。\r\n\r\n类的类类型（com.lang.Class类的实例对象）\r\n\r\n当Java虚拟机加载一个类时，会隐含的创建描述这个类的Class实例，通常把这个Class类的实例对象叫做这个类的类类型（ class type），这样更易理解。下面为一个简单示例：\r\n\r\npackage com.reflact;\r\n\r\npublic class Test1 {\r\n    public static void main(String args[]){\r\n\r\n        Car car1 = new Car();\r\n    }\r\n}\r\n\r\n \r\n\r\n我们都知道 car1 是 Car类 的一个实例对象，那么 Car 这个类到底是什么呢？ 这个 Car 类 本身也是一个对象 。在面向对象的世界里，万事万物皆对象，类也是对象，是Class类的实例对象。为了更易理解，我们把这个对象叫做该类的类类型(class type)。对比 car1 和 Car ，可以理解成car1 对象是按照Car这个类的类型来实例化的，同样Car类也有它自己的 类类型，可以通过以下三种方式获取Car类的类类型(class type)：\r\n\r\npackage com.reflact;\r\n\r\npublic class Test1 {\r\n    public static void main(String args[]){\r\n        Car car1 = new Car();\r\n\r\n        Class c1 = Car.class;\r\n        Class c2 = car1.getClass();\r\n        try {\r\n            Class c3 = Class.forName(\"com.reflact.Car\");\r\n        } catch (ClassNotFoundException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\r\n\r\n  \r\n\r\nc1、c2和c3都是Car类的类类型（class type），其中第一种方式和第三种方式通过类来获取类类型，第二种是通过类的实例化对象来获取类类型。那么c1、c2、c3是否相等呢？做以下测试：\r\n\r\npackage com.reflact;\r\n\r\npublic class Test1 {\r\n    public static void main(String args[]) throws ClassNotFoundException {\r\n        Car car1 = new Car();\r\n\r\n        Class c1 = Car.class;\r\n        Class c2 = car1.getClass();\r\n        Class c3 = Class.forName(\"com.reflact.Car\");\r\n        System.out.println(c1 == c2);\r\n        System.out.println(c1 == c3);\r\n    }','2016-06-04 16:24:46',0,0),(31,'e试着在这里添加一篇博文',41,'Hibernate 中find方法HQL语句 and 和 or 的混合使用\r\n分享| 2012-05-12 22:32 死难者的荣耀\r\n软件开发编程语言\r\n\r\n我想写一个HQL语句查询使用，就是有一个ID条件是必须的，其他的一些条件是或的（就是几个条件中符合一个就可以）\r\n设想是 from Goods where name = ？ or value =？ or mark =？ and ID =？\r\n但是我现在这样做，and没有效果，不属于这个Id的也可以查到这个Id下的消息\r\n请问该如何更改？\r\n\r\n2012-05-12 22:36\r\n提问者采纳\r\n\r\nfrom Goods where id = ? and (name = ? or name is null) and (value = ? or value is null) and (mark = ? or mark is null)\r\n这样试试... or不能连接那么多的...\r\n\r\n提问者评价\r\n\r\n    我把所有的null去掉，全部or放在一个括号里就行了\r\n\r\n分享\r\n评论 |\r\n\r\n270291747 | 来自：芝麻团 | 五级 采纳率43%\r\n\r\n擅长： JAVA相关 数据库DB 手机/通讯 图像处理软件\r\n','2016-06-04 22:00:00',1,0),(32,'他唐唐堂堂唐唐堂堂唐唐堂堂唐唐堂堂',38,'111111111111111111111111111111 如何瓦房出发搭Xevcxrsexxxxxxxxxxxxxxxxxxxxxxxxxx','2016-06-04 23:03:19',1,0);

/*Table structure for table `comment` */

DROP TABLE IF EXISTS `comment`;

CREATE TABLE `comment` (
  `infor_id` int(255) NOT NULL AUTO_INCREMENT COMMENT '主键/自增',
  `article_id` int(255) NOT NULL COMMENT '评论文章的id',
  `receiver_id` int(11) NOT NULL COMMENT '被接受评论者的id',
  `sender_id` int(11) NOT NULL COMMENT '发布评论者的id',
  `comment_content` varchar(50) NOT NULL COMMENT '评论的内容文本',
  `comment_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '评论发布的时间',
  PRIMARY KEY (`infor_id`),
  KEY `article_id` (`article_id`),
  KEY `receiver_id` (`receiver_id`),
  KEY `sender_id` (`sender_id`),
  CONSTRAINT `comment_ibfk_1` FOREIGN KEY (`article_id`) REFERENCES `article` (`article_id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `comment_ibfk_2` FOREIGN KEY (`receiver_id`) REFERENCES `user` (`id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `comment_ibfk_3` FOREIGN KEY (`sender_id`) REFERENCES `user` (`id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8;

/*Data for the table `comment` */

insert  into `comment`(`infor_id`,`article_id`,`receiver_id`,`sender_id`,`comment_content`,`comment_time`) values (7,19,32,33,'在这里写下你的评论rrrrrrrrrrrr','2016-06-03 18:17:57');

/*Table structure for table `user` */

DROP TABLE IF EXISTS `user`;

CREATE TABLE `user` (
  `id` int(255) NOT NULL AUTO_INCREMENT COMMENT '主键/自动递增',
  `username` varchar(11) NOT NULL COMMENT '用户名',
  `password` varchar(50) NOT NULL COMMENT '密码',
  `email` varchar(50) NOT NULL COMMENT '邮箱',
  `laber` varchar(50) DEFAULT NULL COMMENT '用户标签',
  `img` varchar(50) DEFAULT NULL COMMENT '头像',
  `integtal` int(50) DEFAULT '0' COMMENT '用户积分',
  `rdate` timestamp NULL DEFAULT CURRENT_TIMESTAMP COMMENT '注册时间',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=42 DEFAULT CHARSET=utf8;

/*Data for the table `user` */

insert  into `user`(`id`,`username`,`password`,`email`,`laber`,`img`,`integtal`,`rdate`) values (32,'duyufei','6512bd43d9caa6e02c990b0a82652dca','11@163.com','','upload/5e327341-5b06-487c-8fdf-6ce6250eca4e.png',0,'2016-06-03 16:14:24'),(33,'pubby','723d505516e0c197e42a6be3c0af910e','yf.du@163.com',NULL,'upload/NoImage.jpg',0,'2016-06-03 16:14:24'),(34,'dyf','6512bd43d9caa6e02c990b0a82652dca','11@163.com',NULL,'upload/8ff2a625-a1b5-4dbd-af96-d36b55934c21.png',0,NULL),(35,'dyff','6512bd43d9caa6e02c990b0a82652dca','11@163.com',NULL,'upload/77a82987-910f-4215-a236-3104d460887c.png',0,NULL),(36,'dfffff','6512bd43d9caa6e02c990b0a82652dca','123@163.com',NULL,'upload/8bbabb77-1233-4fc9-b6b6-fea1f89aae37.png',0,NULL),(37,'pu','723d505516e0c197e42a6be3c0af910e','yf.du@163.com',NULL,'upload/NoImage.jpg',0,NULL),(38,'y','415290769594460e2e485922904f345d','y@163.com',NULL,'upload/adefe5f6-605c-44f7-a35a-a6764b803d5b.png',0,'2016-06-04 19:30:41'),(39,'pu2','723d505516e0c197e42a6be3c0af910e','yf.du@163.com',NULL,'upload/NoImage.jpg',0,NULL),(40,'i','865c0c0b4ab0e063e5caa3387c1a8741','i@163.com',NULL,'upload/NoImage.jpg',0,'2016-06-04 21:45:22'),(41,'errrrrrrrrr','e1671797c52e15f763380b45e841ec32','e@163.com',NULL,'upload/NoImage.jpg',0,'2016-06-04 21:50:42');

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;
